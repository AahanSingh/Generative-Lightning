"""This module contains all loss functions used in the CycleGAN
"""
import torch
import torch.utils.data
import torch.nn.functional as F


def discriminator_loss(real, generated):
    """Discriminator Loss for CycleGAN

    Args:
        real (torch.Tensor): Bx3x256x256 sized tensor of the real input image.
        generated (torch.Tensor): Bx3x256x256 sized tensor generated by the generator.

    Returns:
        torch.Tensor: Total Discriminator loss
    """
    real_loss = F.binary_cross_entropy_with_logits(input=real,
                                                   target=torch.ones_like(real),
                                                   reduction="none")
    generated_loss = F.binary_cross_entropy_with_logits(input=generated,
                                                        target=torch.zeros_like(generated),
                                                        reduction="none")
    total_disc_loss = real_loss + generated_loss
    return total_disc_loss * 0.5


def generator_loss(generated):
    """Generator loss for CycleGAN

    Args:
        generated (torch.Tensor): Image generated by the generator.

    Returns:
        torch.Tensor: BCE with Logits applied to Generator output and a target of all ones.
    """
    return F.binary_cross_entropy_with_logits(input=generated,
                                              target=torch.ones_like(generated),
                                              reduction="none")


def cycle_loss(real_image, cycled_image, LAMBDA):
    """Calculates cycle loss.

    Args:
        real_image (torch.Tensor): The real image
        cycled_image (_type_): The cycled image
        LAMBDA (int): Constant

    Returns:
        torch.Tensor: Cycle Loss
    """
    loss = torch.mean(torch.abs(real_image - cycled_image))
    return LAMBDA * loss


def identity_loss(real_image, same_image, LAMBDA):
    """Calculates Identity loss

    Args:
        real_image (torch.Tensor): The real image
        same_image (torch.Tensor): The real image (photo/monet)
                                    passed through its respective generator(photo/monet).
        LAMBDA (int): Constant

    Returns:
        torch.Tensor: Idenitity Loss
    """
    loss = torch.mean(torch.abs(real_image - same_image))
    return LAMBDA * 0.5 * loss